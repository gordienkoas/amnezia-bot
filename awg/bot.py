import asyncio
import logging
import os
import re
import json
import uuid
from datetime import datetime, timedelta

import aiohttp
import aiofiles
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz

import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
setting = db.get_config()
bot_token = setting.get('bot_token')
admin_ids = setting.get('admin_ids', [])
moderator_ids = setting.get('moderator_ids', [])
wg_config_file = setting.get('wg_config_file')
docker_container = setting.get('docker_container')
endpoint = setting.get('endpoint')
pricing = setting.get('pricing', {
    '1_month': 1000.0,
    '3_months': 2500.0,
    '6_months': 4500.0,
    '12_months': 8000.0
})

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=bot_token)
dp = Dispatcher(bot)

# –°–ø–∏—Å–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
admins = [int(admin_id) for admin_id in admin_ids]
moderators = [int(mod_id) for mod_id in moderator_ids]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = {}
awaiting_promo_application = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
async def delete_message_after_delay(chat_id, message_id, delay=2):
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# Middleware –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
class AdminMessageDeletionMiddleware(BaseMiddleware):
    async def on_process_message(self, message: types.Message, data: dict):
        if message.from_user.id in admins and message.text.startswith('/'):
            asyncio.create_task(delete_message_after_delay(message.chat.id, message.message_id))


# –î–æ–±–∞–≤–ª—è–µ–º middleware
dp.middleware.setup(AdminMessageDeletionMiddleware())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu_markup(user_id):
    markup = InlineKeyboardMarkup(row_width=2)

    if user_id in admins:
        buttons = [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user"),
            InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users"),
            InlineKeyboardButton("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", callback_data="active_connections"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω", callback_data="pricing_settings"),
            InlineKeyboardButton("üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="manage_promocodes"),
            InlineKeyboardButton("üì¶ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", callback_data="create_backup"),
            InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞", callback_data="server_settings")
        ]
    elif user_id in moderators:
        buttons = [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user"),
            InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users"),
            InlineKeyboardButton("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", callback_data="active_connections")
        ]
    else:
        buttons = [
            InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"),
            InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
        ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 2 –∫–æ–ª–æ–Ω–∫–∏
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            markup.row(buttons[i], buttons[i + 1])
        else:
            markup.row(buttons[i])

    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help
@dp.message_handler(commands=['start', 'help'])
async def start_command_handler(message: types.Message):
    user_id = message.from_user.id
    welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –±–æ—Ç!*

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º VPN —Å–µ—Ä–≤–∏—Å–æ–º.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - –ü–æ–º–æ—â—å

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
"""

    await message.answer(welcome_text, parse_mode='Markdown',
                         reply_markup=get_main_menu_markup(user_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(lambda c: c.data == "add_user")
async def prompt_for_user_name(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in admins and user_id not in moderators:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    user_states[user_id] = 'awaiting_username'


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(
    lambda message: message.from_user.id in user_states and user_states[message.from_user.id] == 'awaiting_username')
async def process_username(message: types.Message):
    user_id = message.from_user.id
    username = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not re.match(r'^[a-zA-Z0-9_]+$', username):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.")
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = db.root_add(username)
    if success:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        users_dir = 'users'
        conf_file = os.path.join(users_dir, username, f"{username}.conf")

        if os.path.exists(conf_file):
            with open(conf_file, 'r') as f:
                config_content = f.read()

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            filename = f"{username}_vpn_config.conf"
            with open(filename, 'w') as f:
                f.write(config_content)

            await message.answer_document(types.InputFile(filename),
                                          caption=f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è {username}")
            os.remove(filename)
        else:
            await message.answer("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    del user_states[user_id]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query_handler(lambda c: c.data == "list_users")
async def list_users_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in admins and user_id not in moderators:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    clients = db.get_client_list()
    if not clients:
        await callback_query.message.answer("üìù –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
        return

    response = "üìã *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
    for i, (username, config) in enumerate(clients, 1):
        response += f"{i}. `{username}`\n"

    await callback_query.message.answer(response, parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
@dp.callback_query_handler(lambda c: c.data == "active_connections")
async def active_connections_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in admins and user_id not in moderators:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    active_clients = db.get_active_list()
    if not active_clients:
        await callback_query.message.answer("üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        return

    response = "üìä *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*\n\n"
    for i, (username, last_handshake) in enumerate(active_clients, 1):
        response += f"{i}. `{username}` - –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {last_handshake}\n"

    await callback_query.message.answer(response, parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
@dp.callback_query_handler(lambda c: c.data == "manage_promocodes")
async def manage_promocodes_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in admins:
        await callback_query.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="add_promocode"))
    markup.add(InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", callback_data="list_promocodes"))
    markup.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))

    await callback_query.message.answer("üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
@dp.callback_query_handler(lambda c: c.data == "create_backup")
async def create_backup_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in admins:
        await callback_query.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–∞
        backup_dir = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        os.makedirs(backup_dir, exist_ok=True)

        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        if os.path.exists('users'):
            shutil.copytree('users', os.path.join(backup_dir, 'users'))
        if os.path.exists('files'):
            shutil.copytree('files', os.path.join(backup_dir, 'files'))

        # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
        shutil.make_archive(backup_dir, 'zip', backup_dir)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
        await callback_query.message.answer_document(
            types.InputFile(f"{backup_dir}.zip"),
            caption="üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞"
        )

        # –û—á–∏—Å—Ç–∫–∞
        shutil.rmtree(backup_dir)
        os.remove(f"{backup_dir}.zip")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
async def check_expired_subscriptions():
    try:
        data = db.load_json(db.USER_EXPIRATION_FILE, {})
        now = datetime.now(pytz.utc)

        for username, user_data in data.items():
            expiration = user_data.get('expiration')
            if expiration and datetime.fromisoformat(expiration) < now:
                # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
                db.deactive_user_db(username)
                db.remove_user_expiration(username)

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                for admin_id in admins:
                    try:
                        await bot.send_message(admin_id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–∏—Å—Ç–µ–∫–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞)")
                    except:
                        pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()
scheduler.add_job(check_expired_subscriptions, 'interval', hours=1)
scheduler.start()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if not bot_token:
        logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        logger.error("–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ files/config.json:")
        logger.error('{"bot_token": "YOUR_BOT_TOKEN", "admin_ids": [123456789]}')
        exit(1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not admins:
        logger.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ admin_ids –≤ config.json")

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    executor.start_polling(dp, skip_updates=True)
